name: CI

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: pocketbot
  CONTAINER_NAME: "pocket"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Build container image
        run: docker build -t pocketbot .

      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

#      - name: Log in to GitHub Container Registry
#        run: echo ${{ secrets.CR_PAT }} | docker login $(echo $REGISTRY) -u tabularasa31 --password-stdin

      - name: Push image to GitHub Container Registry
        run: docker push ghcr.io/tabularasa31/pocketbot

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Deploy to Jino via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME
          script: |
            whoami
            
            # Login into GitHub Registry
            docker login $(echo $REGISTRY) -u tabularasa31 --password-stdin
            
            # Stop running container
            docker stop $(echo $CONTAINER_NAME)
            
            # Remove old container
            docker rm $(echo $CONTAINER_NAME)
            
            # Set env variables
            export TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            export CONSUMER_KEY=${{ secrets.POCKET_CONSUMER_KEY }}
            export AUTH_SERVER_URL=${{ secrets.AUTH_SERVER_URL }}
            
            # Run a new container from a new image
            docker run -e TOKEN -e CONSUMER_KEY -e AUTH_SERVER_URL -d \
            --restart always \
            --publish 80:80 \
            --name $(echo $CONTAINER_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)