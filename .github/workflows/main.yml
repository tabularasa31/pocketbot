name: CI/CD

on:
  push:
    branches: [master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "pocketbotimage"
  CONTAINER_NAME: "pocketbot"

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#        with:
#          images: ${{ env.REGISTRY }}/tabularasa31/${{ env.IMAGE_NAME }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/tabularasa31/${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Deploy to Jino via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          envs: IMAGE_NAME,REGISTRY,CONTAINER_NAME
          script: |
            whoami
            
            # Login into GitHub Registry
            echo ${{ secrets.CR_PAT }} | docker login ${{ env.REGISTRY }} -u tabularasa31 --password-stdin
            
            # Stop running container
            docker stop ${{ env.CONTAINER_NAME }}
            # Remove old container
            docker rm ${{ env.CONTAINER_NAME }}  
            
            docker rm $(docker stop $(docker ps -a -q --filter ancestor=${{ env.IMAGE_NAME}} --format="{{.ID}}"))
            
            # Set env variables
            export TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            export CONSUMER_KEY=${{ secrets.POCKET_CONSUMER_KEY }}
            export AUTH_SERVER_URL=${{ secrets.AUTH_SERVER_URL }}
            
            # Run a new container from a new image
            docker run -e TOKEN -e CONSUMER_KEY -e AUTH_SERVER_URL -d \
            --restart always \
            --publish 80:80 \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.REGISTRY }}/tabularasa31/${{ env.IMAGE_NAME }}:${{ github.sha }}